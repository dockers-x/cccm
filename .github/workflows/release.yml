name: Release
on:
  push:
    tags:
      - "*"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Cross build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe: cccm
            cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            exe: cccm
            cross: true

          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
            exe: cccm
            cross: true

          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
            exe: cccm
            cross: true

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            exe: cccm
            cross: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe: cccm.exe
            cross: false

          - os: macos-latest
            target: x86_64-apple-darwin
            exe: cccm
            cross: false

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Since rust 1.72, some platforms are tier 3
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install OpenSSL
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install pkg-config libssl-dev
      - name: Install OpenSSL
        if: matrix.os == 'macos-latest'
        run: brew install openssl@3

      # Native build
      - name: Run tests
        if: matrix.cross == false
        run: cargo test --release --target ${{ matrix.target }} --verbose
      - name: Build release
        if: matrix.cross == false
        run: cargo build --release --target ${{ matrix.target }}

      # Cross build
      - name: Install cross
        if: matrix.cross
        run: cargo install --version 0.2.5 cross
      - name: Run tests
        if: matrix.cross
        run: cross test --release --target ${{ matrix.target }} --verbose  --no-default-features
      - name: Build release
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}  --no-default-features

      - name: Run UPX
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        # Disable upx for mips. See https://github.com/upx/upx/issues/387
        if: matrix.os == 'ubuntu-latest' && !contains(matrix.target, 'mips')
        uses: crazy-max/ghaction-upx@v3
        with:
          version: v4.0.2
          files: target/${{ matrix.target }}/release/${{ matrix.exe }}
          args: -q --best --lzma

      - uses: actions/upload-artifact@v4
        with:
          name: cccm-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.exe }}

      - name: Zip Release
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: cccm-${{ matrix.target }}.zip
          directory: target/${{ matrix.target }}/release/
          path: ${{ matrix.exe }}

      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/${{ matrix.target }}/release/cccm-${{ matrix.target }}.zip
          generate_release_notes: true
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/cccm
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max